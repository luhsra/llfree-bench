<?xml version="1.0" encoding="utf-8"?>
<svg version="1.1" width="500" height="182" onload="init(evt)" viewBox="-15 0 510 150" xmlns="http://www.w3.org/2000/svg" xmlns:bx="https://boxy-svg.com">
  <defs>
    <bx:grid x="0" y="0" width="15" height="15"/>
  </defs>
  <style type="text/css">
	text { font-family:Arial; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames &gt; *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
  <script type="text/ecmascript">

	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x &amp;&amp; params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el &amp;&amp; el.attributes &amp;&amp; el.attributes.y &amp;&amp; el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey &amp;&amp; e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey &amp;&amp; e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&amp;');
		for (var i = 0; i &lt; paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&amp;';
		}
		if (uri.slice(-1) == "&amp;")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w &lt; 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl &lt; w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x &gt; 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) &lt;= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i &lt; c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i &lt; c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i &lt; c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i &lt; el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) &gt; ymin;
			} else {
				upstack = parseFloat(a.y.value) &lt; ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex &lt;= xmin &amp;&amp; (ex+ew+fudge) &gt;= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex &lt; xmin || ex + fudge &gt;= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i &lt; el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i &lt; el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i &lt; el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w &gt; maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w &gt; matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x &gt;= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}

</script>
  <g id="frames" transform="matrix(1, 0, 0, 1, -10, -6)">
    <g>
      <title>page_remove_rmap (3,169,562,952 samples, 1.60%)</title>
      <rect x="442.5" y="69" width="7.7" height="15.0" fill="#029e73" rx="2" ry="2"/>
      <text x="445.54" y="79.5" style="white-space: pre;"/>
    </g>
    <g>
      <title>clear_page_erms (2,268,283,924 samples, 1.14%)</title>
      <rect x="327.6" y="37" width="5.4" height="15.0" fill="#029e73" rx="2" ry="2"/>
      <text x="330.56" y="47.5" style="white-space: pre;"/>
    </g>
    <g>
      <title>all (198,695,343,734 samples, 100%)</title>
      <rect x="10.0" y="133" width="480.0" height="15.0" rx="2" ry="2" fill="#0173b2"/>
      <text style="white-space: pre;" y="143.5" x="13.00"/>
    </g>
    <g>
      <title>charge_memcg (29,716,501,674 samples, 14.96%)</title>
      <rect x="194.9" y="69" width="71.8" height="15.0" fill="#029e73" rx="2" ry="2"/>
      <text x="197.87" y="79.5" style="white-space: pre;">charge_m..</text>
    </g>
    <g>
      <title>vma_alloc_folio (12,639,462,774 samples, 6.36%)</title>
      <rect x="319.1" y="69" width="30.6" height="15.0" fill="#a8a8a8" rx="2" ry="2"/>
      <text x="322.12" y="79.5" style="white-space: pre;">vm..</text>
    </g>
    <g>
      <title>unmap_page_range (16,102,761,661 samples, 8.10%)</title>
      <rect x="439.4" y="85" width="38.9" height="15.0" fill="#a8a8a8" rx="2" ry="2"/>
      <text x="442.45" y="95.5" style="white-space: pre;">unm..</text>
    </g>
    <g>
      <title>rmqueue (6,524,608,593 samples, 3.28%)</title>
      <rect x="333.0" y="53" width="15.8" height="15.0" rx="2" ry="2" fill="rgb(222,143,5)"/>
      <text style="white-space: pre;" y="63.5" x="336.03"/>
    </g>
    <g>
      <title>do_user_addr_fault (124,957,873,279 samples, 62.89%)</title>
      <rect x="133.1" y="101" width="301.9" height="15.0" fill="#a8a8a8" rx="2" ry="2"/>
      <text x="136.11" y="111.5" style="white-space: pre;">do_user_addr_fault</text>
    </g>
    <g>
      <title>zap_page_range (16,102,761,661 samples, 8.10%)</title>
      <rect x="439.4" y="101" width="38.9" height="15.0" fill="#a8a8a8" rx="2" ry="2"/>
      <text x="442.45" y="111.5" style="white-space: pre;">zap..</text>
    </g>
    <g>
      <title>lru_add_fn (5,008,941,868 samples, 2.52%)</title>
      <rect x="274.7" y="37" width="12.1" height="15.0" fill="#029e73" rx="2" ry="2"/>
      <text x="277.69" y="47.5" style="white-space: pre;"/>
    </g>
    <g>
      <title>do_anonymous_page (69,300,638,008 samples, 34.88%)</title>
      <rect x="182.2" y="85" width="167.5" height="15.0" fill="#a8a8a8" rx="2" ry="2"/>
      <text x="185.24" y="95.5" style="white-space: pre;">do_anonymous_page</text>
    </g>
    <g>
      <title>check_preemption_disabled (4,858,512,642 samples, 2.45%)</title>
      <rect x="251.0" y="37" width="11.8" height="15.0" fill="#029e73" rx="2" ry="2"/>
      <text x="254.02" y="47.5" style="white-space: pre;"/>
    </g>
    <g>
      <title>folio_add_lru (9,274,955,663 samples, 4.67%)</title>
      <rect x="266.7" y="69" width="22.4" height="15.0" fill="#029e73" rx="2" ry="2"/>
      <text x="269.66" y="79.5" style="white-space: pre;">f..</text>
    </g>
    <g>
      <title>asm_exc_page_fault (147,831,964,697 samples, 74.40%)</title>
      <rect x="82.2" y="117" width="357.1" height="15.0" fill="#a8a8a8" rx="2" ry="2"/>
      <text x="85.21" y="127.5" style="white-space: pre;">asm_exc_page_fault</text>
    </g>
    <g>
      <title>tlb_flush_mmu (11,422,655,036 samples, 5.75%)</title>
      <rect x="450.2" y="69" width="27.6" height="15.0" fill="#a8a8a8" rx="2" ry="2"/>
      <text x="453.20" y="79.5" style="white-space: pre;">t..</text>
    </g>
    <g>
      <title>do_madvise (16,102,761,661 samples, 8.10%)</title>
      <rect x="439.4" y="117" width="38.9" height="15.0" fill="#a8a8a8" rx="2" ry="2"/>
      <text x="442.45" y="127.5" style="white-space: pre;">do_..</text>
    </g>
    <g>
      <title>release_pages (11,138,797,876 samples, 5.61%)</title>
      <rect x="450.9" y="53" width="26.9" height="15.0" fill="#a8a8a8" rx="2" ry="2"/>
      <text x="453.88" y="63.5" style="white-space: pre;">r..</text>
    </g>
    <g>
      <title>down_read_trylock (19,684,340,612 samples, 9.91%)</title>
      <rect x="349.7" y="85" width="47.5" height="15.0" fill="rgb(213,94,0)" rx="2" ry="2"/>
      <text x="352.65" y="95.5" style="white-space: pre;">down..</text>
    </g>
    <g>
      <title>check_preemption_disabled (9,985,964,908 samples, 5.03%)</title>
      <rect x="205.7" y="53" width="24.1" height="15.0" fill="#029e73" rx="2" ry="2"/>
      <text x="208.69" y="63.5" style="white-space: pre;">c..</text>
    </g>
    <g>
      <title>prep_new_page (2,844,327,142 samples, 1.43%)</title>
      <rect x="326.2" y="53" width="6.8" height="15.0" fill="#029e73" rx="2" ry="2"/>
      <text x="329.16" y="63.5" style="white-space: pre;"/>
    </g>
    <g>
      <title>folio_batch_move_lru (7,701,560,227 samples, 3.88%)</title>
      <rect x="269.8" y="53" width="18.6" height="15.0" fill="#029e73" rx="2" ry="2"/>
      <text x="272.77" y="63.5" style="white-space: pre;"/>
    </g>
    <g>
      <title>free_unref_page_list (5,045,077,387 samples, 2.54%)</title>
      <rect x="463.7" y="37" width="12.2" height="15.0" rx="2" ry="2" fill="rgb(222,143,5)"/>
      <text style="white-space: pre;" y="47.5" x="466.73"/>
    </g>
    <g>
      <title>get_mem_cgroup_from_mm (8,267,123,061 samples, 4.16%)</title>
      <rect x="289.1" y="69" width="19.9" height="15.0" fill="#029e73" rx="2" ry="2"/>
      <text x="292.07" y="79.5" style="white-space: pre;"/>
    </g>
    <g>
      <title>try_charge_memcg (14,343,871,629 samples, 7.22%)</title>
      <rect x="232.0" y="53" width="34.7" height="15.0" fill="#029e73" rx="2" ry="2"/>
      <text x="235.01" y="63.5" style="white-space: pre;">tr..</text>
    </g>
    <g>
      <title>page_add_new_anon_rmap (3,862,364,967 samples, 1.94%)</title>
      <rect x="309.6" y="69" width="9.4" height="15.0" fill="#029e73" rx="2" ry="2"/>
      <text x="312.63" y="79.5" style="white-space: pre;"/>
    </g>
    <g>
      <title>up_read (14,794,826,350 samples, 7.45%)</title>
      <rect x="399.2" y="85" width="35.8" height="15.0" fill="rgb(213,94,0)" rx="2" ry="2"/>
      <text x="402.24" y="95.5" style="white-space: pre;">up_..</text>
    </g>
  </g>
  <text style="white-space: pre; fill: rgb(51, 51, 51); font-family: Arial, sans-serif; font-size: 11.3px;" x="11.156" y="17.255">Flags / LRU / rmap / cgroup</text>
  <ellipse style="fill: rgb(2, 158, 115);" cx="3.846" cy="13.458" rx="4.154" ry="4.154"/>
  <text style="white-space: pre; fill: rgb(51, 51, 51); font-family: Arial, sans-serif; font-size: 11.3px;" x="11.156" y="32.255">Locking</text>
  <ellipse style="fill: rgb(213, 94, 0);" cx="3.846" cy="28.458" rx="4.154" ry="4.154"/>
  <text style="white-space: pre; fill: rgb(51, 51, 51); font-family: Arial, sans-serif; font-size: 11.3px;" x="11.156" y="47.255">Page Allocator</text>
  <ellipse style="fill: rgb(222, 143, 5);" cx="3.846" cy="43.458" rx="4.154" ry="4.154"/>
  <path d="M 328.103 28.901 H 348.58 L 348.58 24.9 L 354.944 30 L 348.58 35.1 L 348.58 31.1 H 328.103 V 28.901 Z" style="" transform="matrix(0, 1, -1, 0, 360.676544, -309.091858)" bx:shape="arrow 328.103 24.9 26.841 10.2 2.199 6.364 0 1@9d30eb5e"/>
  <text style="white-space: pre; fill: rgb(51, 51, 51); font-family: Arial, sans-serif; font-size: 11.3px;" x="283.156" y="15.255" transform="matrix(1, 0, 0, 1, 27, 1)">Allocate<tspan x="283.156005859375" dy="1em">​</tspan></text>
  <path d="M 327.673 28.901 H 332.908 L 332.908 24.9 L 339.272 30 L 332.908 35.1 L 332.908 31.1 H 327.673 V 28.901 Z" style="" transform="matrix(0, 1, -1, 0, 489.676453, -309.091858)" bx:shape="arrow 327.673 24.9 11.599 10.2 2.199 6.364 0 1@f2d417b2"/>
  <text style="white-space: pre; fill: rgb(51, 51, 51); font-family: Arial, sans-serif; font-size: 11.3px;" x="283.156" y="15.255" transform="matrix(1, 0, 0, 1, 165, 1)">Free<tspan x="283.156005859375" dy="1em">​</tspan></text>
</svg>